//
//  ViewController.swift
//  Factec
//
//  Created by Drunisa on 3/7/22.
//

import UIKit
import FaceTecSDK
import LocalAuthentication

class ViewController: UIViewController, URLSessionDelegate {
    
    var latestSessionResult: FaceTecSessionResult!
    
    var latestProcessor: Processor!
    var latestExternalDatabaseRefID: String = ""
    var latestServerResult: [String: AnyObject]!

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
        Config.initializeFaceTecSDKFromAutogeneratedConfig(completion: { initializationSuccessful in
            if(initializationSuccessful) {
                print("succesfully connected")
            }
            
        })
    }

    @IBAction func onPressChanged(_ sender: Any) {
        getSessionToken() { sessionToken in
            self.latestProcessor = LivenessCheckProcessor(sessionToken: sessionToken, fromViewController: self)
        }
    }
    
    func onComplete() {
        //self.utils.fadeInMainUI()
        
        if self.latestProcessor.isSuccess() {
            print("sucess")
        }
        else {
            // Show early exit message to screen.  If this occurs, please check logs.
            print("Session exited early, see logs for more details.")
            
        }
    }
    func setLatestSessionResult(sessionResult: FaceTecSessionResult) {
        latestSessionResult = sessionResult
    }
    
    
    func getLatestExternalDatabaseRefID() -> String {
        return latestExternalDatabaseRefID;
    }
    
    func getSessionToken(sessionTokenCallback: @escaping (String) -> ()) {
        
        let endpoint = Config.BaseURL + "/session-token"
        let request = NSMutableURLRequest(url: NSURL(string: endpoint)! as URL)
        request.httpMethod = "GET"
        // Required parameters to interact with the FaceTec Managed Testing API.
        request.addValue(Config.DeviceKeyIdentifier, forHTTPHeaderField: "X-Device-Key")
        request.addValue(FaceTec.sdk.createFaceTecAPIUserAgentString(""), forHTTPHeaderField: "User-Agent")
        
        let session = URLSession(configuration: URLSessionConfiguration.default, delegate: self, delegateQueue: OperationQueue.main)
        let task = session.dataTask(with: request as URLRequest, completionHandler: { data, response, error in
            // Ensure the data object is not nil otherwise callback with empty dictionary.
            guard let data = data else {
                print("Exception raised while attempting HTTPS call.")
                //self.utils.handleErrorGettingServerSessionToken()
                return
            }
            if let responseJSONObj = try? JSONSerialization.jsonObject(with: data, options: JSONSerialization.ReadingOptions.allowFragments) as! [String: AnyObject] {
                if((responseJSONObj["sessionToken"] as? String) != nil)
                {
                    //self.utils.hideSessionTokenConnectionText()
                    sessionTokenCallback(responseJSONObj["sessionToken"] as! String)
                    return
                }
                else {
                    print("Exception raised while attempting HTTPS call.")
                    //self.utils.handleErrorGettingServerSessionToken()
                }
            }
        })
        task.resume()
    }
    
}

